import type { Fn } from '../fns'

export const adapters: Fn[] = [
  // Filter
  {
    name: 'filter',
    args: { predicate: 'impl FnMut(&#Self::$Item) -> $bool' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Filter'],
    description: 'Creates an iterator which uses a closure to determine if an element should be yielded.',
    related: ['filter_map'],
  },
  {
    name: 'step_by',
    args: { step: '$usize' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Filter'],
    description: 'Creates an iterator starting at the same point, but stepping by the given amount at each iteration.',
  },
  {
    name: 'skip',
    args: { n: '$usize' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Filter'],
    description: 'Creates an iterator that skips the first <code>n</code> elements.',
  },
  {
    name: 'skip_while',
    args: { predicate: 'impl FnMut(&#Self::$Item) -> $bool' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Filter'],
    description: 'Creates an iterator that skips elements based on a predicate.',
  },
  {
    name: 'take',
    args: { n: '$usize' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Filter'],
    description:
      'Creates an iterator that yields the first <code>n</code> elements, or fewer if the underlying iterator ends sooner.',
  },
  {
    name: 'take_while',
    args: { predicate: 'impl FnMut(&#Self::$Item) -> $bool' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Filter'],
    description: 'Creates an iterator that yields elements while the given predicate returns <code>true</code>.',
  },
  {
    name: 'fuse',
    args: {},
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Filter'],
    description: 'Creates an iterator which ends after the first <code>None</code>.',
  },
  // Expand
  {
    name: 'chain',
    args: { iterable: 'impl IntoIterator<Item = #Self::$Item>' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Expand'],
    description: 'Takes two iterators and creates a new iterator over both in sequence.',
  },
  {
    name: 'cycle',
    args: {},
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Expand'],
    description: 'Repeats an iterator endlessly.',
  },
  {
    name: 'intersperse',
    args: { separator: '#Self::$Item' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Expand'],
    description:
      'Creates a new iterator which places a copy of <code>separator</code> between adjacent items of the original iterator.',
    nightly: true,
  },
  {
    name: 'intersperse_with',
    args: { separator_fn: 'impl FnMut() -> #Self::$Item' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Expand'],
    description:
      'Creates a new iterator which places an item generated by <code>separator_fn</code> between adjacent items of the original iterator.',
    nightly: true,
  },
  // Transform
  {
    name: 'enumerate',
    args: {},
    returns: 'impl Iterator<Item = ($usize, #Self::$Item)>',
    category: ['Adapters', 'Transform'],
    description: 'Creates an iterator which gives the current iteration count as well as the next value.',
  },
  {
    name: 'map',
    generic_args: { U: [] },
    args: { transform: 'impl FnMut(#Self::$Item) -> $U' },
    returns: 'impl Iterator<Item = $U>',
    category: ['Adapters', 'Transform'],
    description: 'Takes a closure and creates an iterator which calls that closure on each element.',
  },
  {
    name: 'zip',
    generic_args: { U: [] },
    args: { iterable: 'impl IntoIterator<Item = $U>' },
    returns: 'impl Iterator<Item = (#Self::$Item, $U)>',
    category: ['Adapters', 'Transform'],
    description:
      '‘Zips up’ two iterators into a single iterator of pairs. There\'s also a <a href="https://doc.rust-lang.org/std/iter/fn.zip.html">free function</a>.',
    related: ['unzip'],
  },
  {
    name: 'flatten',
    args: {},
    returns: 'impl Iterator<Item = #Self::$Item::$Item>',
    where: ['#Self::$Item: IntoIterator'],
    category: ['Adapters', 'Transform'],
    description: 'Creates an iterator that flattens nested structure.',
    related: ['flat_map'],
  },
  {
    name: 'copied',
    generic_args: { T: ['Copy'] },
    args: {},
    returns: 'impl Iterator<Item = $T>',
    where: ['#Self::$Item = &$T'],
    category: ['Adapters', 'Transform'],
    description: 'Creates an iterator which copies all of its elements.',
  },
  {
    name: 'cloned',
    generic_args: { T: ['Clone'] },
    args: {},
    returns: 'impl Iterator<Item = $T>',
    where: ['#Self::$Item = &$T'],
    category: ['Adapters', 'Transform'],
    description: 'Creates an iterator which <code>clone</code>s all of its elements.',
  },
  {
    name: 'flat_map',
    generic_args: { U: ['IntoIterator'] },
    args: { transform: 'impl FnMut(#Self::$Item) -> $U' },
    returns: 'impl Iterator<Item = $U::$Item>',
    category: ['Adapters', 'Transform'],
    description: 'Creates an iterator that works like map, but flattens nested structure.',
    related: ['map'],
  },
  {
    name: 'filter_map',
    generic_args: { U: [] },
    args: { transform: 'impl FnMut(#Self::$Item) -> Option<$U>' },
    returns: 'impl Iterator<Item = $U>',
    category: ['Adapters', 'Transform'],
    description: 'Creates an iterator that both filters and maps.',
    related: ['filter'],
  },
  {
    name: 'map_while',
    generic_args: { U: [] },
    args: { predicate: 'impl FnMut(#Self::$Item) -> Option<$U>' },
    returns: 'impl Iterator<Item = $U>',
    category: ['Adapters', 'Transform'],
    description: 'Creates an iterator that both yields elements based on a predicate and maps.',
    related: ['take_while'],
  },
  {
    name: 'scan',
    generic_args: { St: [], U: [] },
    args: { init: 'St', accumulate: 'impl FnMut(&#mut $St, #Self::$Item) -> Option<$U>' },
    returns: 'impl Iterator<Item = $U>',
    category: ['Adapters', 'Transform'],
    description:
      'An iterator adapter which, like <code>fold</code>, holds internal state, but unlike <code>fold</code>, produces a new iterator.',
    related: ['fold'],
  },
  {
    name: 'array_chunks',
    const_generic_args: { N: '$usize' },
    args: {},
    returns: 'impl Iterator<Item = [#Self::$Item; $N]>',
    category: ['Adapters', 'Transform'],
    description: 'Returns an iterator over <code>N</code> elements of the iterator at a time.',
    nightly: true,
  },
  {
    name: 'map_windows',
    generic_args: { U: [] },
    const_generic_args: { N: '$usize' },
    args: { transform: 'impl FnMut(&[#Self::$Item; $N]) -> $U' },
    returns: 'impl Iterator<Item = $U>',
    category: ['Adapters', 'Transform'],
    description:
      'Calls the given function for each contiguous window of size <code>N</code> over <code>self</code> and returns an iterator over the outputs.',
    related: ['windows'],
    nightly: true,
  },
  // Misc.
  {
    name: 'inspect',
    args: { function: 'impl FnMut(&#Self::$Item)' },
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Misc.'],
    description: 'Does something with each element of an iterator, passing the value on.',
  },
  {
    name: 'peekable',
    args: {},
    returns: 'impl Iterator<Item = #Self::$Item>',
    category: ['Adapters', 'Misc.'],
    description:
      'Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> methods to look at the next element of the iterator without consuming it.',
  },
  {
    name: 'rev',
    args: {},
    returns: 'impl Iterator<Item = #Self::$Item>',
    where: ['#Self: DoubleEndedIterator'],
    category: ['Adapters', 'Misc.'],
    description: 'Reverses an iterator’s direction.',
    related: ['last', 'rposition'],
  },
]
